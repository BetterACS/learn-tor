'use client';
import { useState, useRef, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Navbar, ChatbotSidebar, AlertBox } from '@/components/index';
import clsx from 'clsx';

export default function Page() {
  const { data: session } = useSession();
  const router = useRouter();
  const isLoggedIn = !!session;

  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [messages, setMessages] = useState<{ sender: 'user' | 'bot'; text: string }[]>([]);
  const [input, setInput] = useState('');
  const [isBotTyping, setIsBotTyping] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  const handleSidebarToggle = (isOpen: boolean) => setIsSidebarOpen(isOpen);
  const handleSelectItem = (item: string) => {
    const presetMessages: Record<string, { sender: 'user' | 'bot'; text: string }[]> = {
      'new-chat': [],
      'Today-1': [
        { sender: 'user', text: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≠‡∏ö Admission ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢' },
        { sender: 'bot', text: `‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Admission ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏∏‡∏î‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö TCAS
                (Thai University Central Admission System) ‡∏à‡∏∞‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ
                - ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1 ‡∏£‡∏≠‡∏ö Portfolio
                - ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2 ‡∏£‡∏≠‡∏ö Quota
                - ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 3 ‡∏£‡∏≠‡∏ö Admission
                - ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 4 ‡∏£‡∏≠‡∏ö Direct Admission` },
      ],
      'Previous2-1': [
        { sender: 'user', text: '‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤' },
        { sender: 'bot', text: `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≠‡∏ö
                ‚úÖ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
                ‚úÖ ‡πÉ‡∏ö ‡∏õ‡∏û.1 (Transcript) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                ‚úÖ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                ‚úÖ ‡πÅ‡∏ü‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏≠‡∏ö Portfolio)
                ‚úÖ ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô` },
      ],
      'Previous2-2': [
        { sender: 'user', text: '‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏ö‡∏ï‡∏¥‡∏î' },
        { sender: 'bot', text: `üî• ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏≠‡∏ö‡∏ï‡∏¥‡∏î
          ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î ‚Üí ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
          ‚úÖ ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ & ‡∏ù‡∏∂‡∏Å‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤
          ‚úÖ ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‚Üí ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
          ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Admission ‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î
          ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏î‡∏µ` },
      ],
      'Previous6-1': [
        { sender: 'user', text: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢‡πÑ‡∏´‡∏ô‡πÅ‡∏û‡∏á‡∏™‡∏∏‡∏î' },
        { sender: 'bot', text: `‡πÅ‡∏û‡∏á‡∏™‡∏∏‡∏î: ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå-‡∏ó‡∏±‡∏ô‡∏ï‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)
                 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ê: MUIC, ‡∏à‡∏∏‡∏¨‡∏≤‡∏Ø BBA/INDA, ‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå BBA (~200,000 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏ó‡∏≠‡∏°)
                 ‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô: ABAC, ‡∏™‡πÅ‡∏ï‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏î, ‡∏°.‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û (~70,000 - 120,000 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏ó‡∏≠‡∏°)` },
      ],
    };

    setMessages(presetMessages[item] || []);
  };

  const handleSendMessage = () => {
    if (!isLoggedIn) {
      router.push('/login');
      setShowAlert(true);
      return;
    }

    if (input.trim() === '' || isBotTyping) return;

    setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: input }]);
    setInput('');
    setIsBotTyping(true);

    setTimeout(() => {
      setMessages((prevMessages) => [
        ...prevMessages,
        { sender: 'bot', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á' },
      ]);
      setIsBotTyping(false);
    }, 1000);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="h-screen overflow-hidden flex flex-col">
      <Navbar />
      <ChatbotSidebar onToggleSidebar={handleSidebarToggle} onSelectItem={handleSelectItem} />

      <div className={clsx('flex flex-col items-center justify-between h-full transition-all duration-300', {
        'ml-[40%] md:ml-[15%] sm:ml-[10%]': isSidebarOpen,
        'ml-0': !isSidebarOpen,
      })}>
        <div className="flex justify-center flex-col flex-1 overflow-y-auto">
          {messages.length === 0 ? (
            <div className="text-monochrome-950 text-headline-3 lg:text-headline-2 text-center mt-auto mb-4">
              What can I help?
            </div>
          ) : (
            <div className="overflow-y-auto max-h-[calc(100vh-200px)] scrollbar-hidden">
              {messages.map((msg, index) => (
                <div key={index} className={clsx('flex items-center gap-1', {
                  'justify-end ml-auto': msg.sender === 'user',
                  'justify-start mr-auto': msg.sender === 'bot',
                })}>
                  {msg.sender === 'bot' && (
                    <img src="images/logofooter.avif" alt="Bot Logo" className="w-16 h-16 ml-1" />
                  )}
                  <div className={clsx('text-monochrome-950 text-body-large p-2 mt-10 rounded-lg', {
                    'bg-monochrome-50': msg.sender === 'bot',
                    'bg-monochrome-100': msg.sender === 'user',
                    'self-end break-words': msg.sender === 'user',
                    'self-start ml-1': msg.sender === 'bot',
                    'lg:max-w-[55%] sm:max-w-[70%] md:max-w-[65%]': true,
                  })}>
                    {msg.text.split('\n').map((line, idx) => (
                      <p key={idx}>{line}</p>
                    ))}
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          )}
        </div>

        <div className="relative flex flex-col w-full max-w-3xl px-4 sm:px-2 mt-auto">
          <textarea
            placeholder="Text input"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            onFocus={() => {
              if (!isLoggedIn) {
                setShowAlert(true);
              }
            }}
            className="h-[90px] p-3 bg-monochrome-100 border border-monochrome-100 rounded-xl text-monochrome-950
                       placeholder:text-monochrome-400 focus:outline-none focus:ring-2 focus:ring-primary-600 focus:border-primary-600
                       resize-none box-border mr-4"
          />
          <button
            type="button"
            onClick={handleSendMessage}
            disabled={isBotTyping || input.trim() === ''}
            className="absolute top-3 right-9 w-8 h-8 opacity-80 hover:opacity-100 transition-opacity duration-300"
          >
            <img src="images/feature/send.avif" alt="Send Icon" className="w-full h-full" />
          </button>
        </div>

        <div className="text-monochrome-500 text-body-small mt-4 mb-12">
          Learntor ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        </div>
      </div>
      {showAlert && (
        <AlertBox
          alertType="warning"
          title="Warning"
          message="Please log in before using."
        />
      )}
    </div>
  );
}
